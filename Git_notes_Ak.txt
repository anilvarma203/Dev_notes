GIT:(Global Information Tracker)
===
=>is a version control system. used to communicate with GitHub repository
=>Git is the tool used to track changes in your code
=>It will maintain multiple versions of the same file
=>It records every modification, addition, or deletion.
=> it runs: On your local machine (command line or GUI tools).

=>Git allows tracking of all code changes:
Who modified
When modified
What was modified
Why modified

=>Git stores this information in the commit history, which you can view using commands like git log or git show.

GITHUB:
=======
=>GitHub is a platform which is used to store all code at one place.
=>GitHub helps with integration, especially in collaborative environments.
=>it runs: On the web (github.com).

=>On GitHub, we can create repositories to store project code.
=>All developers can connect to the GitHub repository for code integration (making code integration very easy).

Environment Setup:
------------------
1.Create an account at github.com (free of cost).
2.Download & install Git client software: https://git-scm.com/downloads
3.Open Git Bash and configure your name and email:
    git config --global user.name "your-name"
    git config --global user.email "your-email"
Configuring name and email is a one-time process.

What is a GitHub Repository?:
------------------------------
=>A repository is a place to store project source code/files.
=>For each project, one GitHub repository is created.
=>Two types of repositories:
Public Repo: Anybody can see & you choose who can commit.
Private Repo: You choose who can see & who can commit.
Example:
Project Git Repo URL: https://github.com/ashokitschool/sbi_loans_app.git

Project team members use the repo URL to connect.

Git Architecture:
------------------
1.Working Tree
2.Staging Area
3.Local Repository
4.Central Repository (Remote)

->To see the version of git
  >git --version

Basic commands:
------------------
git init
git add .
git status
git commit -m "msg"
git remote add origin <url>
git push
git pull
git log
git clone <url>
git remote -v
git merge
git rebase
git diff


Git Bash Commands:
-------------------
git init                                 # Initialize working tree
git add <file-name>                      # Add file to staging area (file is getting tracked)
git add .                                # Add all files to staging area
git status                               # Show working tree status(files are tracked or untracked)	

git commit: 
------------
git commit -m "msg"                      # Commit staged files to local repo
git commit -m "msg" filename             # commit specific file to local repo
git commit --amend -m ‚Äúmessage‚Äù          # To edit the lastest commit message
git commit --amend --author ‚Äúname <mail>" # To edit author for latest commit 
git commit --amend --no-edit             # To add staged files to commit the changes with prev commit 
=>for every commit it will create a commit id.


git remote add origin <url>              # To create link between central repo and working directory.
git remote rm origin                     # To remove link between central repo and working directory.

git push                                 # Push local commits to remote repo

git remote -v                            # Displays the list of remote repositories associated with your local Git project.

git restore <file>                       # Discard changes (files are in working tree)
git restore <filename>                   # restore the file that was deleted (i.e.,committed or staged)
git restore --staged <file>              # Unstage a file  (removes it from the staging area)
git rm --cached <file>                   # To unstage and Stop tracking the file entirely (untracking the file).


git log:
===========
git log                                  # To get commit history
git log -2                               # To get top 2 commit history
git log --follow --all filename          # To get full commits of a single file (how many commits done on a single file)
git log --oneline                        # To getonly commit id and commit msg 
git log --pretty=oneline                 # To get only full commit id and commit ms

git show:
---------
git show commit-id                       # To get detailed information about a  specific commit.(ex: commit msg,author,changes made) 
git show commit-id --stat                # To get history of a commit in stat format 
git show <commit-id> --name-only         # command to display only the files changed in a specific commit

git diff                                 # shows you the differences between commits, branches, files, and more.
git pull                                 # Get latest changes from remote repo

->pull latest changes before you push,Okkjtherwise it will not allow u to push code to the remote repository.
NOTE: when we use pull command there is a chance of getting conflicts.

Conflict: If 2 developers modify same exact line(s) of data in a file then conflict occur. we need to resolved and we need to commit and push without conflicts.
--------

git clone <repo-url>                     # Download remote repo to local
git rm <file-name>                       # Remove a file
Note: After git rm, commit and push to delete file from remote repo.


Git GUI:
========
=>A desktop tool to perform Git operations.

=>Run in working tree:
   >git gui

==========================
what is .gitignore file ?
==========================
=>It is used to specify files and folder to skip from git operations (i.e.,tracking). 
ex:
target/
.project 
.settings

===============
Git Branches:
===============
Branch: A branch in GitHub (and Git in general) is a parallel version of a repository. It allows you to work on different features, bug fixes, or experiments without affecting the main codebase (usually the main or master branch).
=>It isolate your work from main branch.
=>when multiple teams working on same repo then project delivery will become difficult. To make project delivery process simple, we need to maintain multiple branches in git hub repo.
Note: For every team one git branch is recommended.

ex:
Recommended Branches:
main (default)
develop (development team)
sit (bug fixing team)
research (R&D team)
release (production team)

Multiple teams can work in parallel using branches.
=>After branching, branch merge can do in 2 ways,
1.By using git merge new_branchname(cli)
2.By creating pull request(gui)

1=>Git commands related to branches:

  Create a new branch                    # git branch new-branch-name
  Switch to a branch                     # git checkout new-branch-name
  Create and switch to a new branch      # git checkout -b new-branch-name
  Push a branch to GitHub                # git push origin new-branch-name
  Shows only your local branches         # git branch
  Shows both local AND remote branches   # git branch -a
  To see you were on which branch        # git branch --show-current
  Delete a branch (local branch)         # git branch -d branch-name
  To delete a remote branch              # git push origin --delete branch_name
  removes the branch even if it hasn't been merged.  #git branch -D branchname
  Download branch code from repo         # git clone -b branch-name <url>
  To change the name of a branch         # git branch -m oldbn newbn
                       

üõ†Ô∏è Typical Workflow:
======================
# Step 1: Switch to main and pull the latest changes
git checkout main
git pull origin main

# Step 2: Create a new feature branch
git checkout -b feature/my-new-featurwe

# Step 3: Work on your feature, commit changes
git add .
git commit -m "Add new feature"

# Step 4: Push the branch to remote
git push origin feature/my-new-feature

# Step 5: Open a pull request to merge into main

git merge:
----------
=>It is used to merge all commits from one branch to another.
Note: you should merge from main branch
   >git merge new_bn        --->Combines the history
 
    #git merge --abort     --->Cancels the merge and keeps main unchanged  

**git conflict: Conflicts only happen when both branches modify the same file, especially the same lines. after the new branch created.
---------------

git rebase:
------------
It is also used to integrate changes from one branch into another,but they do it in very different ways.
   >git rebase new_bn      -- rewrites the history
=>This replays your feature commits on top of main, making it look like you started from there.


2.On GitHub (Web Interface):
---------------------------
1.Go to your repository.
2.Click the branch dropdown near the top-left.
3.Type a new branch name and press Enter to create it.
4.You can also switch between branches here.

=>Why Branches Are Important,
Safe experimentation: Try new ideas without affecting the main code.
Better collaboration: Each team member can work on their own branch.

Lab Task:
---------
1.Go to GitHub and create develop branch from main.
2.Clone the repo (main branch will be cloned by default):
    >git clone <url>
3.Switch to develop branch:
    >git checkout develop
4.Create a file and push it to develop branch.
5.Create a Pull Request and merge develop into main.


‚úÖ What is Git Cherry-pick?
===============================
=>when we use 'git merge' command By default, all commits will merge from one branch to another branch.

=>If you want to merge specific commit from one branch to another branch, then use git cherry-pick.
     ex: git cherry-pick <commit-id>


Git Interview Concepts:
========================
‚úÖ What is a Pull Request?
=>A Pull Request is used to merge changes from one branch into another.

Example:
Merging changes from the develop branch to the main branch.


‚úÖ What is Git Stash?
=======================
=>Git Stash is used to save the current changes in a backup (stash) and make the working directory clean.
üì¶ Common Scenarios to Use git stash
1.You're in the middle of work but need to quickly switch to another branch.
2.You want to pull updates from the remote and your changes might conflict.
3.You‚Äôre experimenting and want to save your work-in-progress without committing messy code.

Example Scenario:
JIRA-101 assigned at 9 AM ‚Üí Work started, partial changes done.

At 11 AM, JIRA-102 assigned ‚Üí It's critical.

To work on JIRA-102, stash the JIRA-101 changes:
    >git stash

After pushing JIRA-102 changes, get JIRA-101 changes back to working tree :
    >git stash apply

To see the stash list:
    >git stash list

To delete the stash:
    >git stash clear

To Delete a specific stash
    >git stash drop stash-id

üß§ Here's What Gets Stashed:
git stash            # Saves staged (files you‚Äôve added with git add.) + unstaged changes(files you‚Äôve modified but haven‚Äôt staged.)
git stash -u         # Also includes untracked files
git stash -a         # Includes everything, even ignored files


‚úÖ How to Remove Git Local Commits?
======================================
=>Use the git reset command to undo local commits.
Types of Reset:                                                                                             Your Commit Sequence:
1.Soft Reset: Removes commit but retains changes in the staging area.                                     abc123 ‚Üí 1a2b3c ‚Üí 11aa33 ‚Üí 22dd33 (HEAD)
  >git reset --soft HEAD~1
                                                                                                         üß®  Command 1: git reset --hard HEAD~2
2.Hard Reset: Removes both commit and file changes.                                      This moves HEAD back 2 commits from the current position (22dd33), which lands you at 1a2b3c.
  >git reset --hard HEAD~1
                                                                                                      
3.Keeps changes in the working directory but unstages them.                                              üß® Command 2: git reset --hard 1a2b3c
  >git reset --mixed HEAD~1                                                            This explicitly resets HEAD to commit 1a2b3c,this would jump directly to 1a2b3c, discarding all                                
                                                                                                          changes and commits made after it.
4.To delete all committs from git                                                           
  >git update-ref -d HEAD

5.To show commits history that were "deleted" or lost
  >git reflog

6.To restore deleted committs
  >git cherry-pick <commit-hash>
   (or)
  >git reset --hard <commit-hash>


‚úÖ How to Revert git Central Repo Commits?
=============================================
git revert:
-----------
=>Use the git revert command it creates a new commit to remove/undo changes from the previous commit. 
 ex: git revert <commit-id>
 ex: git revert a1b2c3d

=>This will create a new revert commit that undoes/removes the changes introduced by commit a1b2c3d and keep a1b2c3d commit as it as.
ex:It shows new commit like this,
  4835e89(Head->master) Revert "master file changes"

Note: After git revert execution we need execute git push
       >git push


‚úÖ Git Pull vs Git Fetch
==========================
Command	Description,
git pull	: Download latest changes from the central repo to working tree directly.
git fetch	: Downloads changes from central to local repo only.
note: To merge changes from local repo to working tree we can use 'git merge' command.
To merge after fetch, run:
  >git merge
git pull = git fetch + git merge

‚úÖ git merge vs git rebase
===========================
=>git merge: when we use git merge, all the commits like new commits in dev or feature branch will be added to master/main branch in addition to that one extra commit will be added which      
             will denote that merge hase taken place. 
=>It used when you want to preserve history.
ex:
main:    A---B---C
               \
feature:         D---E
                   /
merged:    A---B---C---F

‚Ä¢ F is the merge commit combining changes from both branches.
‚Ä¢ History shows both branches clearly.

=>git rebase: when we use git rebase, there will be only the commits that were new in dev or like whichever branch we are going to merge from so those changes or commits will be added,  
              there won't be any extra new commit. 
ex:
main:    A---B---C
                   \
feature:             D'--E'
‚Ä¢ No merge commit; history looks linear.

üß† Key Insight:
‚Ä¢ Merge keeps the original commits and history; adds a merge commit.
‚Ä¢ Rebase replays commits and rewrites them with new IDs.
     

‚úÖ What is Git Fork?
======================
=>Git Fork is used to copy someone else's GitHub repository into your own GitHub account.
=>Useful for contributing to open-source projects.





                         ========================
                                MAVEN                  
                         ========================
=>MAVEN is a powerful build automation and project management tool primarily used for Java projects. It helps developers manage a project's build process, dependencies, documentation, and more.
=>it based on POM.xml(Project Object Model): extensible markup language:
=>pom.xml consists metadata ,dependecies, kind of data, kind of project ,description.
=>Maven is an open-source project, it is a part of Apache software foundation(ASF).

Note: one project contains only one workspace, each workspace consists of one pom.xml files.

what is build tool:
---------------------
=>It is used to set up everything which is required to run your code.
=>It helps compile, package, test, and deploy Java applications.

=>You define your build process in a pom.xml file (Project Object Model).
=>maven can build any no.of projects into desired output such as .jar(java archive file), .war(web archive file), and .ear(enterprise archive).

=>for dowloading depenencies visit mvnrepository.com

Dependencies: refers to external libraries or modules your project needs to work.
       ‚û§ Instead of manually downloading JAR files, Maven lets you declare them in your pom.xml, and it automatically downloads them for you.

Repository : A repository is a storage location where Maven looks for dependencies.
Types:
1.Local Repository:
‚Ä¢ Located on your computer (usually in ~/.m2/repository)
‚Ä¢ Maven checks here first before downloading anything

2.Central Repository:
‚Ä¢ Online repositories like Maven Central
‚Ä¢ If a dependency isn‚Äôt found locally, Maven downloads it from here

3.Remote Repository:
‚Ä¢ Used by companies to host their own libraries 
‚Ä¢ Tools like Nexus or Artifactory are often used

Java project structure:
-----------------------
pom.xml(dependencies,plugins)
Application source code
Test code
project structure(asserts,resources)
configurations
task runner
reporting

üîÑ Maven Build Lifecycle Phases:
---------------------------------
1.Validate
‚Ä¢ validate the project structure and configuration before actual build starts.

2.compile
‚Ä¢ Compiles the source code of the project.

3.test
‚Ä¢ Runs the unit tests using a testing framework (e.g., JUnit).
‚Ä¢ To ensure that your code passes all unit tests.
‚Ä¢ Tests are not packaged or deployed.

4.package
‚Ä¢ Packages the compiled code into a distributable format (e.g., JAR or WAR).

5.verify
‚Ä¢ Runs checks to ensure the package is valid and meets quality criteria.

 6.install
‚Ä¢ Installs the packaged artifact into the local Maven repository (~/.m2/repository) for use by other projects.

7.deploy
‚Ä¢ deploys the final package to a remote repository for sharing with other developers or systems.

8.clean
‚Ä¢  

MAVEN COMMANDS:   Build Process 
===============
way-1:
------
Step-1: Install Java (OpenJDK 8)
     Command: yum install java-1.8.0-openjdk -y

Step-2: Install maven
     ‚Ä¢ Install Maven via yum                        --this is the direct option, choose any one option among 2.
     Command : yum install maven -y (or)
      
     ‚Ä¢ Download from Apache Website                 -- this is manual process 
     Command : wget https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz

     ->when you do like this, it download the .tar.gz file from Apache's official site.You extract it using
          >tar -zxvf apache-maven-3.9.4-bin.tar.gz

Step-3: clone the project code from git
     Command: git clone <url>
=>After cloning go the navigate to the project directory where it contains pom.xml & src files/folders, and perform maven actions

Step-4: COMPILE THE CODE
        Command: mvn compile

Step-5: TEST THE CODE
        Command: mvn test

Step-6: Package THE CODE
        Command: mvn package

STEP-7: INSTALL THE CODE
        Command: mvn install

STEP-8: CLEAN THE CODE (opt)
        Command: mvn clean

NOTE: TO DO AL THESE STEPS IN SINGLE GOAL up to install: : mvn clean package


way-2:
======
Step-1: Install Java (OpenJDK 8)
     Command: yum install java-1.8.0-openjdk -y

Step-2: Install maven
        ‚Ä¢ Download from Apache Website
        Command : wget https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz

     ->when you do like this, it download the .tar.gz file from Apache's official site.You extract it using
          >tar -zxvf apache-maven-3.9.4-bin.tar.gz

     ->Navigate to your desired folder apache-maven-3.9.4 and perform nxt steps.

NOTE: the below step is used insted of cloning, means when we dont have git url, only for practise not fpr real time, use above way for real time.

Step-3: Generate resources  or creating maven project 	                             
        Command: mvn archetype:generate                                                           
                                                                                          
=>while Generate resources it will ask for groupid,artifactid. after completion list the file/dir and move to the artifactid.
üìõ groupId: Think of it like a package name or organization name.
üì¶ artifactId: This is the name of your project/module.

Step-4: COMPILE THE CODE
        Command: mvn compile

Step-5: TEST THE CODE
        Command: mvn test

Step-6: Package THE CODE
        Command: mvn package

STEP-7: INSTALL THE CODE
        Command: mvn install

STEP-8: CLEAN THE CODE (opt)
        Command: mvn clean

NOTE: TO DO AL THESE STEPS IN SINGLE GOAL up to install: : mvn clean package

 























































































